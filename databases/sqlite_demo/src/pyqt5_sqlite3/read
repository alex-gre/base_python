Демонстрация: контактная книга с Python
===========================================
Контактные книги — полезное и широко используемое приложение. Они повсюду. Наверняка у вас есть контактная книга на телефоне и на компьютере. 
С помощью контактной книги вы можете хранить и управлять контактной информацией членов вашей семьи, друзей, коллег и т. д.
В этом руководстве вы создадите приложение с графическим интерфейсом контактной книги с помощью Python, SQLite и PyQt . 
Вот демонстрация того, как ваша контактная книга будет выглядеть и работать после того, как вы выполните шаги, описанные в этом руководстве:
Ваша контактная книга обеспечит минимальный необходимый набор функций для такого рода приложений. Вы сможете отображать, создавать, обновлять и удалять информацию в 
списке контактов.
===================================================================== 
Обзор проекта
Чтобы создать приложение для книги контактов, вам необходимо организовать код в модули и пакеты и придать вашему проекту согласованную структуру. В этом руководстве вы будете использовать следующую структуру каталогов и файлов:
rpcontacts_project/
│
├── rpcontacts/
│   ├── __init__.py
│   ├── views.py
│   ├── database.py
│   ├── main.py
│   └── model.py
│
├── requirements.txt
├── README.md
└── rpcontacts.py
Вот краткий обзор содержимого каталога вашего проекта:
•	rpcontacts_project/является корневым каталогом проекта. Он будет содержать следующие файлы: 
o	requirements.txtпредоставляет список требований проекта.
o	README.mdпредоставляет общую информацию о проекте.
o	rpcontacts.pyпредоставляет сценарий точки входа для запуска приложения.
•	rpcontacts/— это подкаталог, содержащий основной пакет приложения. Он предоставляет следующие модули: 
=======================================================================================================
o	__init__.py
o	views.py
o	database.py
o	main.py
o	model.py
В этом руководстве вы шаг за шагом рассмотрим каждый из этих файлов. Имя каждого файла дает представление о его роли в приложении. Например, views.py
будет содержать код для создания графического интерфейса окон и диалогов, database.pyбудет содержать код для работы с базой данных и main.py
будет содержать само приложение. Наконец, model.pyбудет реализована модель управления данными в базе данных приложения.
В общем, приложение будет иметь главное окно для отображения, добавления, удаления и обновления контактов. 
Он также будет иметь диалоговое окно для добавления новых контактов в базу данных.
Предпосылки
Чтобы получить максимальную отдачу от этого проекта, могут помочь некоторые предыдущие знания в области программирования GUI с помощью Python и PyQt. 
В связи с этим вам необходимо знать основы того, как:
=======================================================

•	Создавайте приложения с графическим интерфейсом с помощью PyQt и Python.
•	Создавайте и размещайте графические интерфейсы с помощью PyQt
•	Управление базами данных SQL с помощью Python и PyQt
•	Работа с базами данных SQLite
Чтобы освежить в памяти эти темы, вы можете воспользоваться следующими ресурсами:
•	Python и PyQt: создание настольного калькулятора с графическим интерфейсом
•	Python и PyQt: создание меню, панелей инструментов и строк состояния
•	Макеты PyQt: создавайте профессионально выглядящие приложения с графическим интерфейсом
•	Работа с базами данных SQL с помощью PyQt: основы
•	Введение в библиотеки Python SQL
•	Управление данными с помощью Python, SQLite и SQLAlchemy
Не беспокойтесь, если вы не являетесь экспертом в этих областях, прежде чем приступить к этому руководству. Вы научитесь в процессе работы над реальным проектом. 
Если вы застряли, не торопитесь и просмотрите ресурсы, указанные выше. Затем вернитесь к коду.
Приложение контактной книги, которое вы собираетесь создать в этом руководстве, имеет единственную внешнюю зависимость: PyQt.
Примечание. В этом руководстве вы будете использовать PyQt версии 5.15.2 для создания приложения контактной книги. 
Для работы проекта на macOS Big Sur требуется версия 5.15.2.
PyQt версии 6.0 был выпущен 4 января 2021 года. Это первый выпуск библиотеки, который привязывается к Qt версии 6 . 
Однако проект в этом руководстве не тестировался с PyQt 6.0.
Если вы чувствуете необходимость запустить проект с этой новой версией PyQt, попробуйте. Как подсказка, вы должны pip install PyQt6, а затем обновить импорт, 
чтобы использовать PyQt6вместо PyQt5.
Чтобы следовать рекомендациям в процессе разработки, вы можете начать с создания виртуальной среды , а затем установить PyQt с помощью pip. После того, как вы установили PyQt, вы готовы начать кодирование!
Шаг 1. Создание скелетного приложения контактной книги с помощью PyQt
На этом первом шаге вы создадите минимальное, но функциональное приложение PyQt с графическим интерфейсом, чтобы обеспечить основу, на которой вы начнете создавать контактную книгу. Вы также создадите минимальную необходимую структуру проекта, включая основной пакет проекта и сценарий точки входа для запуска приложения.
Весь код и файлы, которые вы добавите в проект книги контактов в этом разделе, собраны в source_code_step_1/каталоге. Вы можете скачать их, нажав на ссылку ниже:
Получите исходный код: щелкните здесь, чтобы получить исходный код, который вы будете использовать для создания контактной книги с помощью Python, PyQt и SQLite в этом руководстве.
К концу этого раздела вы сможете в первый раз запустить каркас приложения с графическим интерфейсом для своей контактной книги.

Структурирование проекта контактной книги
Чтобы начать кодирование приложения, создайте новый каталог с именем rpcontacts_project/. Это будет корневой каталог проекта. Теперь создайте новый подкаталог с именем rpcontacts/внутри rpcontacts_project/. Этот подкаталог будет содержать основной пакет приложения . Наконец, запустите редактор кода или IDE в корневом каталоге.
Чтобы превратить каталог в пакет, Python нужен __init__.pyмодуль для инициализации пакета. Создайте внутри этот файл rpcontacts/и добавьте в него следующий код:
# -*- coding: utf-8 -*-

"""This module provides the rpcontacts package."""

__version__ = "0.1.0"
Этот файл сообщает Python, что rpcontactsэто пакет. Код в файле запускается при импорте пакета или некоторых его модулей.
Вам не нужно помещать какой-либо код в __init__.pyфайл для инициализации пакета. Пустой __init__.pyфайл сделает эту работу. 
Однако в этом случае вы определяете константу уровня модуля, которая вызывается __version__для хранения номера версии вашего приложения.
Создание главного окна приложения
Теперь пришло время создать главное окно вашей контактной книги. Для этого создайте модуль с именем views.pyв rpcontactsфайле package. 
Затем добавьте в модуль следующий код и сохраните его:
=========================================================

# -*- coding: utf-8 -*-

"""This module provides views to manage the contacts table."""

from PyQt5.QtWidgets import (
    QHBoxLayout,
    QMainWindow,
    QWidget,
)

class Window(QMainWindow):
    """Main Window."""
    def __init__(self, parent=None):
        """Initializer."""
        super().__init__(parent)
        self.setWindowTitle("RP Contacts")
        self.resize(550, 250)
        self.centralWidget = QWidget()
        self.setCentralWidget(self.centralWidget)
        self.layout = QHBoxLayout()
        self.centralWidget.setLayout(self.layout)
Сначала вы импортируете необходимые классы из PyQt5.QtWidgets. Затем вы создаете Window. 
Этот класс наследуется QMainWindowи предоставляет код для создания главного окна приложения. В методе инициализатора вы устанавливаете заголовок окна на "RP Contacts", 
изменяете размер окна на 550пиксели 250, определяете и устанавливаете центральный виджет с помощью QWidgetи, наконец, определяете макет для центрального виджета с помощью горизонтального макета блока.
Кодирование и запуск приложения
Поскольку у вас уже есть главное окно для книги контактов, пришло время написать код для создания функционального приложения PyQt с использованием QApplication. Для этого создайте новый модуль с именем main.pyв вашем rpcontactsпакете и добавьте в него следующий код:
# -*- coding: utf-8 -*-
# rpcontacts/main.py

"""This module provides RP Contacts application."""

import sys

from PyQt5.QtWidgets import QApplication

from .views import Window

def main():
    """RP Contacts main function."""
    # Create the application
    app = QApplication(sys.argv)
    # Create the main window
    win = Window()
    win.show()
    # Run the event loop
    sys.exit(app.exec())
В этом модуле вы импортируете, sysчтобы получить доступ к exit(), что позволяет вам чисто выйти из приложения, когда пользователь закрывает главное окно. 
Затем вы импортируете QApplicationиз PyQt5.QtWidgetsи Windowиз views. Последним шагом является определение main()основной функции вашего приложения.
Внутри main()вы создаете экземпляр QApplicationи Window. Затем вы вызываете .show()и Window, наконец, запускаете основной цикл приложения или цикл событий ,
используя .exec().
Теперь перейдите в корневой каталог проекта rpcontacts_project/и создайте файл с именем rpcontacts.py. Этот файл предоставляет сценарий точки входа для запуска приложения.
Добавьте следующий код в файл и сохраните его:
=================================================

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# rpcontacts_project/rpcontacts.py

"""This module provides RP Contacts entry point script."""

from rpcontacts.main import main

if __name__ == "__main__":
    main()
Этот файл импортируется main()из вашего main.pyмодуля. Затем вы реализуете традиционный условный оператор , который вызывается main(), если пользователь запускает этот модуль как сценарий Python. Теперь запустите приложение, выполнив команду python rpcontacts.pyв вашей среде Python. На экране появится следующее окно:
 
Вот и все! Вы создали минимальное, но функциональное приложение с графическим интерфейсом PyQt, которое можно использовать в качестве отправной точки для создания своей контактной книги. На этом этапе ваш проект должен иметь следующую структуру:
./rpcontacts_project/
│
├── rpcontacts/
│   ├── __init__.py
│   ├── views.py
│   └── main.py
│
└── rpcontacts.py
В этом разделе вы создали минимальную необходимую структуру для вашего проекта контактной книги, используя модули и пакеты Python. Вы построили главное окно приложения и собрали шаблонный код для создания приложения с графическим интерфейсом PyQt. Вы также запустили приложение в первый раз. Далее вы начнете добавлять функции в свой графический интерфейс.

Шаг 2. Создание графического интерфейса контактной книги с помощью Python
Теперь, когда вы построили скелет приложения книги контактов, вы можете приступить к кодированию графического интерфейса главного окна. В конце этого раздела вы выполните необходимые шаги для создания графического интерфейса вашей контактной книги с помощью Python и PyQt. Графический интерфейс будет выглядеть следующим образом:
 
В центре окна у вас есть табличное представление для отображения списка контактов. В правой части формы у вас есть три кнопки:
1.	Добавить , чтобы добавить новый контакт в список
2.	Удалить , чтобы удалить выбранный контакт из списка
3.	Очистить все , чтобы удалить все контакты из списка
Весь код и файлы, которые вы добавите или измените в этом разделе, собраны в source_code_step_2/каталоге. Вы можете скачать их, нажав на ссылку ниже:
Получите исходный код: щелкните здесь, чтобы получить исходный код, который вы будете использовать для создания контактной книги с помощью Python, 
PyQt и SQLite в этом руководстве.
Вернитесь к views.pyмодулю и обновите код Windowдля создания вышеуказанного графического интерфейса:
======================================================================================================


# -*- coding: utf-8 -*-
# rpcontacts/views.py

"""This module provides views to manage the contacts table."""

from PyQt5.QtWidgets import (
    QAbstractItemView,
    QHBoxLayout,
    QMainWindow,
    QPushButton,
    QTableView,
    QVBoxLayout,
    QWidget,
)

class Window(QMainWindow):
    """Main Window."""
    def __init__(self, parent=None):
        """Initializer."""
        # Snip...

        self.setupUI()

    def setupUI(self):
        """Setup the main window's GUI."""
        # Create the table view widget
        self.table = QTableView()
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.resizeColumnsToContents()
        # Create buttons
        self.addButton = QPushButton("Add...")
        self.deleteButton = QPushButton("Delete")
        self.clearAllButton = QPushButton("Clear All")
        # Lay out the GUI
        layout = QVBoxLayout()
        layout.addWidget(self.addButton)
        layout.addWidget(self.deleteButton)
        layout.addStretch()
        layout.addWidget(self.clearAllButton)
        self.layout.addWidget(self.table)
        self.layout.addLayout(layout)
Сначала вы импортируете несколько дополнительных классов PyQt для использования в графическом интерфейсе. Вот некоторые из наиболее актуальных:
•	QPushButtonдля создания кнопок «Добавить », «Удалить » и «Очистить все».
•	QTableViewдля предоставления табличного представления, которое отображает список контактов
•	QAbstractItemViewпредоставить доступ к политике выбора табличного представления
В этом коде первым добавлением Windowявляется вызов .setupUI()в конце __init__(). Этот вызов генерирует графический интерфейс главного окна при запуске приложения.
Вот что делает код внутри .setupUI():
•	Строка 27 создает QTableViewэкземпляр для отображения списка контактов.
•	В строке 28 свойству присваивается .selectionBehaviorзначение QAbstractItemView.SelectRows. Это гарантирует, что когда пользователь щелкнет любую ячейку табличного 
   представления, будет выбрана вся строка. Строки в представлении таблицы содержат всю информацию, относящуюся к одному контакту в списке контактов.
•	Строки с 31 по 33 добавляют в графический интерфейс три кнопки: Add , Delete и Clear All . Эти кнопки пока не выполняют никаких действий.
•	Строки с 35 по 41 создают и устанавливают согласованный макет для всех виджетов в графическом интерфейсе.
Благодаря этим дополнениям Windowвы можете снова запустить приложение. Окно на вашем экране будет выглядеть так же, как окно, которое вы видели в начале раздела.
Примечание. Номера строк в приведенном выше коде и в остальных примерах кода в этом руководстве предназначены для облегчения объяснения. Они не соответствуют порядку строк в конечном модуле или сценарии.
В этом разделе вы выполнили все необходимые шаги для создания графического интерфейса главного окна вашей контактной книги. Теперь вы готовы приступить к работе над тем, как ваше приложение будет управлять и хранить ваши контактные данные.
Шаг 3: Настройка базы данных контактной книги
На данный момент вы создали приложение PyQt и его графический интерфейс главного окна для создания проекта книги контактов. В этом разделе вы напишете код для определения того, как приложение подключается к базе данных контактов. Чтобы выполнить этот шаг, вы будете использовать SQLite для работы с базой данных и поддержку PyQt SQL для подключения приложения к базе данных и работы с вашими контактными данными.
Исходный код и файлы, которые вы добавите или измените в этом разделе, хранятся в source_code_step_3/каталоге. Вы можете скачать их, нажав на ссылку ниже:
Получите исходный код: щелкните здесь, чтобы получить исходный код, который вы будете использовать для создания контактной книги с помощью Python, PyQt и SQLite в этом руководстве.
Сначала вернитесь в main.pyкаталог rpcontacts/и обновите код, чтобы создать соединение с базой данных:
# -*- coding: utf-8 -*-
# rpcontacts/main.py

"""This module provides RP Contacts application."""

import sys

from PyQt5.QtWidgets import QApplication

from .database import createConnection
from .views import Window

def main():
    """RP Contacts main function."""
    # Create the application
    app = QApplication(sys.argv)
    # Connect to the database before creating any window
    if not createConnection("contacts.sqlite"):
        sys.exit(1)
    # Create the main window if the connection succeeded
    win = Window()
    win.show()
    # Run the event loop
    sys.exit(app.exec_())
В этом случае вы сначала импортируете createConnection()из database.py. Эта функция будет содержать код для создания и открытия соединения с базой данных контактов. Вы будете создавать database.pyи писать createConnection()в следующем разделе.
Внутри main()первая выделенная строка — это попытка создать соединение с базой данных с помощью createConnection(). Если по какой-то причине приложение не может создать соединение, то вызов sys.exit(1)закроет приложение без создания графического элемента и укажет, что произошла ошибка.
Вы должны обрабатывать соединение таким образом, потому что приложение зависит от базы данных для правильной работы. Если у вас нет функционального соединения, ваше приложение вообще не будет работать.
Эта практика позволяет обрабатывать ошибки и аккуратно закрывать приложение в случае возникновения проблемы. Вы также сможете предоставить пользователю соответствующую информацию об ошибке, с которой столкнулось приложение при попытке подключения к базе данных.
После этих дополнений пришло время погрузиться в код createConnection().
Убрать рекламу 
Подключение к базе данных с помощью PyQt и SQLite
Подключение приложения книги контактов к связанной с ним базе данных является фундаментальным шагом в разработке приложения. Для этого вы напишете функцию с именем createConnection(), которая создаст и откроет соединение с базой данных. Если подключение прошло успешно, то функция вернет True . В противном случае он предоставит информацию о причине сбоя соединения.
Вернитесь в каталог и создайте в нем rpcontacts/новый модуль . database.pyЗатем добавьте в этот модуль следующий код:
# -*- coding: utf-8 -*-
# rpcontacts/database.py

"""This module provides a database connection."""

from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtSql import QSqlDatabase

def createConnection(databaseName):
    """Create and open a database connection."""
    connection = QSqlDatabase.addDatabase("QSQLITE")
    connection.setDatabaseName(databaseName)

    if not connection.open():
        QMessageBox.warning(
            None,
            "RP Contact",
            f"Database Error: {connection.lastError().text()}",
        )
        return False

    return True
Здесь вы сначала импортируете некоторые необходимые классы PyQt. Потом определяешь createConnection(). Эта функция принимает один аргумент: databaseNameсодержит имя или путь к физическому файлу базы данных SQLite в вашей файловой системе.
Вот что делает код внутри createConnection():
•	Строка 11 создает соединение с базой данных с помощью QSQLITEдрайвера.
•	В строке 12 задается имя файла или путь к базе данных.
•	Строка 14 пытается открыть соединение. Если во время вызова возникает проблема .open(), то ifблок кода показывает сообщение об ошибке, а затем возвращается False, чтобы указать, что попытка подключения не удалась.
•	Строка 22 возвращается True, если попытка подключения успешна.
Вы уже кодировали createConnection(). Теперь вы можете написать код для создания contactsтаблиц в базе данных.
Создание contacts таблицы
Имея функцию, которая создает и открывает соединение с базой данных, вы можете приступить к кодированию вспомогательной функции для создания таблицы contacts. 
Вы будете использовать эту таблицу для хранения информации о ваших контактах.
Вот код, который реализует _createContactsTable():
# -*- coding: utf-8 -*-
# rpcontacts/database.py

# Snip...
from PyQt5.QtSql import QSqlDatabase, QSqlQuery

def _createContactsTable():
    """Create the contacts table in the database."""
    createTableQuery = QSqlQuery()
    return createTableQuery.exec(
        """
        CREATE TABLE IF NOT EXISTS contacts (
            id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
            name VARCHAR(40) NOT NULL,
            job VARCHAR(50),
            email VARCHAR(40) NOT NULL
        )
        """
    )

def createConnection(databaseName):
    # Snip...
    _createContactsTable()
    return True
Здесь вы сначала добавляете новый импорт. Вы импортируете QSqlQueryдля выполнения и управления операторами SQL.
Внутри _createContactsTable()вы создаете QSqlQueryэкземпляр. Затем вы вызываете .exec()объект запроса со строковым CREATE TABLEоператором SQL в качестве аргумента. Этот оператор создает новую таблицу с именем contactsв вашей базе данных. В таблице есть следующие столбцы:
Столбец	Содержание
id	Целое число с первичным ключом таблицы
name	Строка с именем контакта

job	Строка с названием должности контакта
email	Строка с электронной почтой контакта
Таблица contactsв вашей базе данных будет хранить актуальную информацию о ваших контактах.
Последним шагом для завершения написания кода database.pyявляется добавление вызова _createContactsTable()изнутри createConnection()прямо перед последним returnоператором . Это гарантирует, что приложение создаст contactsтаблицу перед выполнением каких-либо операций с базой данных.
После того, как вы создали contactsтаблицу, вы можете запустить некоторые тесты в базе данных, а также добавить некоторые образцы данных для дальнейшего тестирования.
Тестирование базы данных контактной книги
Итак, вы закончили писать необходимый код для обработки соединения с базой данных контактной книги. В этом разделе вы выполните несколько тестов, чтобы убедиться, что этот код и сама база данных работают правильно. Вы также добавите некоторые образцы данных в базу данных для дальнейшего тестирования позже в этом руководстве.
Теперь откройте терминал или командную строку и перейдите в корневой каталог проекта, rpcontacts_project/. Оказавшись там, запустите интерактивный сеанс Python и введите следующий код:
>>> from rpcontacts.database import createConnection

>>> # Create a connection
>>> createConnection("contacts.sqlite")
True

>>> # Confirm that contacts table exists
>>> from PyQt5.QtSql import QSqlDatabase
>>> db = QSqlDatabase.database()
>>> db.tables()
['contacts', 'sqlite_sequence']
Здесь вы сначала импортируете createConnection()из database.pyмодуля. Затем вы вызываете эту функцию, чтобы создать и открыть соединение с базой данных контактов. Имя файла базы данных contacts.sqlite. Так как этого файла нет в корневом каталоге проекта, SQLite создаст его для вас. Вы можете проверить это, взглянув на ваш текущий каталог.
Затем вы подтверждаете, что база данных содержит таблицу с именем contacts. Для этого вы .database()вызываете QSqlDatabase. Этот метод класса возвращает указатель на текущее соединение с базой данных. С помощью этой ссылки на соединение вы можете позвонить .tables(), чтобы получить список таблиц в базе данных. Обратите внимание, что первой таблицей в списке является contacts, так что теперь вы уверены, что все работает правильно.
Теперь вы можете подготовить SQL-запрос для вставки выборочных данных в contactsтаблицу:
>>> # Prepare a query to insert sample data
>>> from PyQt5.QtSql import QSqlQuery

>>> insertDataQuery = QSqlQuery()
>>> insertDataQuery.prepare(
...     """
...     INSERT INTO contacts (
...         name,
...         job,
...         email
...     )
...     VALUES (?, ?, ?)
...     """
... )
True
Приведенный выше запрос позволяет вставлять определенные значения в атрибуты name, jobи emailи сохранять эти значения в базе данных. Ниже приведен пример того, как это сделать:
>>> # Sample data
>>> data = [
...     ("Linda", "Technical Lead", "linda@example.com"),
...     ("Joe", "Senior Web Developer", "joe@example.com"),
...     ("Lara", "Project Manager", "lara@example.com"),
...     ("David", "Data Analyst", "david@example.com"),
...     ("Jane", "Senior Python Developer", "jane@example.com"),
... ]

>>> # Insert sample data
>>> for name, job, email in data:
...     insertDataQuery.addBindValue(name)
...     insertDataQuery.addBindValue(job)
...     insertDataQuery.addBindValue(email)
...     insertDataQuery.exec()
...
True
True
True
True
True
В этом фрагменте кода вы сначала определяете dataхранение контактной информации списка людей. Затем вы используете forцикл для вставки данных, вызывая .addBindValue(). Затем вы вызываете .exec()объект запроса для эффективного выполнения SQL-запроса к базе данных.
Поскольку все вызовы .exec()return True, можно сделать вывод, что данные были успешно вставлены в базу данных. Если вы хотите подтвердить это, запустите следующий код:
>>> query = QSqlQuery()
>>> query.exec("SELECT name, job, email FROM contacts")
True

>>> while query.next():
...     print(query.value(0), query.value(1), query.value(2))
...
Linda Technical Lead linda@example.com
Joe Senior Web Developer joe@example.com
Lara Project Manager lara@example.com
David Data Analyst david@example.com
Jane Senior Python Developer jane@example.com
Вот и все! Ваша база данных работает отлично! Теперь у вас есть некоторые образцы данных для тестирования приложения, и вы можете сосредоточиться на том, как загружать и отображать контактную информацию в главном окне вашей контактной книги.

Шаг 4: Отображение и обновление существующих контактов
Для отображения ваших контактных данных в главном окне приложения вы можете использовать QTableView. Этот класс является частью архитектуры PyQt Model-View и обеспечивает надежный и эффективный способ отображения элементов из объекта модели PyQt.
Файлы и код, которые вы добавите или измените в этом разделе, хранятся в source_code_step_4/каталоге. Чтобы скачать их, нажмите на ссылку ниже:
Получите исходный код: щелкните здесь, чтобы получить исходный код, который вы будете использовать для создания контактной книги с помощью Python, PyQt и SQLite в этом руководстве.
После того, как вы закончите этот шаг, ваша контактная книга будет выглядеть так:
 
Объект табличного представления в главном окне предоставляет необходимые функции, позволяющие быстро изменять и обновлять контактную информацию.
Например, чтобы обновить имя контакта, вы можете дважды щелкнуть ячейку, содержащую имя, обновить имя, а затем нажать , Enterчтобы автоматически сохранить изменения в базе данных. Но прежде чем вы сможете это сделать, вам нужно создать модель и подключить ее к табличному представлению.
Создание модели для обработки контактных данных
PyQt предоставляет богатый набор классов для работы с базами данных SQL. Для вашего приложения контактной книги вы будете использовать QSqlTableModel, который предоставляет редактируемую модель данных для одной таблицы базы данных. Это идеально подходит для работы, так как ваша база данных имеет одну таблицу, contacts.
Вернитесь в свой редактор кода и создайте новый модуль, вызываемый model.pyвнутри rpcontacts/каталога. Добавьте следующий код в файл и сохраните его:
# -*- coding: utf-8 -*-
# rpcontacts/model.py

"""This module provides a model to manage the contacts table."""

from PyQt5.QtCore import Qt
from PyQt5.QtSql import QSqlTableModel

class ContactsModel:
    def __init__(self):
        self.model = self._createModel()

    @staticmethod
    def _createModel():
        """Create and set up the model."""
        tableModel = QSqlTableModel()
        tableModel.setTable("contacts")
        tableModel.setEditStrategy(QSqlTableModel.OnFieldChange)
        tableModel.select()
        headers = ("ID", "Name", "Job", "Email")
        for columnIndex, header in enumerate(headers):
            tableModel.setHeaderData(columnIndex, Qt.Horizontal, header)
        return tableModel
В этом коде вы сначала выполняете необходимый импорт, а затем создаете файлы ContactsModel. В инициализаторе класса вы определяете атрибут экземпляра, 
  вызываемый .model для хранения модели данных.
Затем вы добавляете статический метод для создания и настройки объекта модели. Вот что делает код ._createModel():
•	Строка 16 создает экземпляр QSqlTableModel()вызываемого tableModel.
•	Строка 17 связывает объект модели с contactsтаблицей в вашей базе данных.
•	Строка 18 устанавливает .editStrategyсвойство модели в QSqlTableModel.OnFieldChange. При этом вы гарантируете, что изменения в модели будут немедленно сохранены в базе данных.
•	Строка 19 загружает таблицу в модель, вызывая .select().
•	Строки с 20 по 22 определяют и устанавливают удобные для пользователя заголовки для contactsстолбцов таблицы.
•	Строка 23 возвращает только что созданную модель.
На этом этапе у вас есть готовая к использованию модель данных. Теперь вам нужно подключить виджет табличного представления к модели, чтобы вы могли предоставить своим 
пользователям контактную информацию. Подключение модели к представлению
Чтобы отобразить контактные данные в главном окне вашей контактной книги, вам необходимо связать табличное представление с моделью данных. 
Чтобы выполнить это соединение, вам нужно вызвать .setModel()объект табличного представления и передать модель в качестве аргумента:
=====================================================================================================================================
# -*- coding: utf-8 -*-
# rpcontacts/views.py

# Snip...
from .model import ContactsModel

class Window(QMainWindow):
    """Main Window."""
    def __init__(self, parent=None):
        # Snip...
        self.contactsModel = ContactsModel()
        self.setupUI()

    def setupUI(self):
        """Setup the main window's GUI."""
        # Create the table view widget
        self.table = QTableView()
        self.table.setModel(self.contactsModel.model)
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        # Snip...
В этом коде вы сначала импортируете ContactsModelиз model.py. Этот класс предоставляет модель, которая управляет данными в базе данных контактов.
В инициализаторе Windowвы создаете экземпляр ContactsModel. Затем внутри .setupUI()вы вызываете .setModel()для .tableподключения модели к табличному представлению. 
Если вы запустите приложение после этого обновления, вы получите окно, которое вы видели в начале шага 4 .
 
Отображение и обновление контактов
Архитектура Model-View PyQt обеспечивает надежный и удобный способ создания приложений с графическим интерфейсом, которые управляют базами данных. 
Модели обмениваются данными и получают доступ к данным в базе данных. Любое изменение в модели немедленно обновляет базу данных. 
Представления отвечают за отображение данных для пользователя, а также за предоставление редактируемых виджетов, позволяющих пользователю изменять 
данные непосредственнов представлении.
Если пользователь изменяет данные через представление, то представление внутренне взаимодействует с моделью и обновляет ее, сохраняя изменения в физической базе данных:
