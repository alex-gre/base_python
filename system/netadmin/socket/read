====================================================================================================
В этой главе вы получите базовые навыки работы с сетью с использованием модуля socket 
(всю документацию по нему можно найти на странице http://docs.python.org/3/library/socket.html). 
Мы постепенно разработаем клиентские и серверные программы, а также TCP-прокси. 
Затем превратим все это в нашу собственную замену netcat вместе с командной оболочкой.
===================================================================================================

Сначала создаем объект сокета с параметрами AF_INET и SOCK_STREAM. Параметр AF_INET говорит о том, что мы будем использовать стандартный адрес IPv4 или сетевое имя, 
а SOCK_STREAM означает, что клиент будет работать по TCP. Затем подключаемся к серверу  и отправляем ему какие-то данные в виде байтов. Последний шаг состоит в 
получении и выводе ответа, после чего сокет можно закрыть. Это простейший вариант TCP-клиента, но вы будете писать его чаще всего.

В этом фрагменте кода делаются серьезные допущения насчет сокетов, и вам определенно нужно о них знать. Первое допущение — соединение всегда остается стабильным, 
второе — сервер ждет, когда мы первыми отправим данные (некоторые серверы сначала шлют данные, а затем ожидают от вас ответа). 
Третье предположение заключается в том, что сервер всегда и вовремя возвращает данные. Все это в основном продиктовано желанием упростить код. 
В программистской среде существуют разные мнения о том, как работать с блокирующими сокетами, обрабатывать их исключения и т. п., однако пентестеры довольно редко реализуют 
такие тонкости в своих инструментах, написанных на скорую руку для сбора данных или эксплуатации удаленных компьютеров, поэтому в данной главе мы их тоже проигнорируем.
